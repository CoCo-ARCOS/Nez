tps
TPS are microservices for processing data from one or more stages within workflows. To be considered a TPS, it must follow an ETL (Extract-Transform-Load) processing approach, maintain the characteristics of a microservice (Scalability, Modularity, independent, self-contained, etc.), and be capable of being deployed in different infrastructures. computing.
-cont
tps_manager
API Gateway and the manager.
-cont
tps_db_data
Database for TPS.
-cont
tps_clustering
TPS with data clustering algorithms.
--act
kmeans
It performs the grouping of the data using the kmeans algorithm. A class label is added to each record.
http://localhost:11001/clustering/kmeans
POST
---input
K
integer
Number of clusters.
---input
columns
string
Text string with the variables to be used for grouping (separated by comma).
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Kmeans service result.
--act
herarhical
It performs the grouping of the data using a hierarchical algorithm.
http://localhost:11001/clustering/herarhical
POST
---input
K
integer
Number of clusters (tree height).
---input
columns
string
Text string with the variables to be used for grouping (separated by comma).
---input
method
string
Binding criteria to use (ward, complete, average, single). The linkage criterion determines what distance to use between observation sets. The algorithm will merge the cluster pairs that minimize this criterion.
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Herarhical service result.
--act
silhouette
It makes a comparison between the kmeans and hierarchical algorithms with the single method, checking values of k from 1 to 15. The result of the tests is graphed.
http://localhost:11001/clustering/silhouette
POST
---input
columns
string
Text string with the variables to be used for grouping (separated by comma).
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Silhouette service result.
-cont
tps_summary
TPS for obtaining statistical data programmed in R language, which can be accessed through rest requests.
--act
correlation
Gets the variance, covariance, and correlation coefficient of a dataset 
http://localhost:11002/api/v1/correlation
POST
---input
columns
string
Text string with the names of the variables to calculate the correlation coefficient (variables must be separated by comma and be at least 2).
---input
method
string
Defines the correlation method (pearson, spearman, kendall, pearson by default). 
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Correlation service result.
--act
covariance
Computes the covariance of at least 2 variables within a dataset.
http://localhost:11002/api/v1/covariance
POST
---input
columns
string
Text string with the names of the variables to calculate the covariance (variables must be separated by comma and be at least 2).
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Covariance service result.
--act
describe
Performs a statistical description of a dataset by calculating measures of central tendency.
http://localhost:11002/api/v1/describe
POST
---input
columns
string
Text string with the names of the variables to perform the statistical calculations separately, by default it is calculated for all numeric columns (variables must be separated by comma and be at least 2).
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Describe service result.
-cont
tps_clustering_tools
TPS with data clustering algorithms.
--act
validation
Performs cluster validation based on different indexes.
http://localhost:3131/api/v1/validation
POST
---input
column
string
Column that has the cluster labels (by default the last one is taken).
---input
indexes
string
List of indices to calculate, separated by commas. Available indices: Ball_Hall, Banfeld_Raftery, C_index, Calinski_Harabasz, Davies_Bouldin, Det_Ratio, Dunn8 intCriteria, Gamma, G_plus, GDI11, GDI12, GDI13, GDI21, GDI22, GDI23, GDI31, GDI51, GDI43, GDI42, GDI42, GDI42, GDI42, GDI42 GDI53, Ksq_DetW, Log_Det_Ratio, Log_SS_Ratio, McClain_Rao, PBM, Point_Biserial, Ray_Turi, Ratkowsky_Lance, Scott_Symons, SD_Scat, SD_Dis, S_Dbw, Silhouette, Tau, Trace_W, Wecarski_WiBmme.
---input
ignore_columns
string
OPTIONAL. List of columns to ignore, separated by commas.
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Validation service result.
--act
jaccard
Jaccard validation index calculation for cluster label comparison.
http://localhost:3131/api/v1/Jaccard
POST
---input
columns
string
List of columns with class labels (maximum 2). By default the last 2 are selected.
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Jaccard service result.
-cont
tps_cleaning_tools
Tools to clean data. Has a basic cleaning service for null data and outliers.
--act
cleanningtools
Cleaning data.
http://localhost:11003/cleaning/basic
POST
---input
columns
string
List of columns with which to work.
---input
ReplaceWithNa
array
List of values to replace with a value of Na.
---input
DropNa
string
Options to delete rows with NA values. Check pandas dropna options. It must be a dict().
---input
NaReaplace
string
Option to fill in all NA values (mean, mode, -99, Not valid, etc).
---input
DataTypes
array
dict() list. Casting columns to specific data types.
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Cleaning service result.
--act
melt
Transformation tool to convert a dataset into a format where one or more columns are identifiers and the rest are decoupled to the axis of the rows.
http://localhost:11003/transform/melt
POST
---input
id_vars
array
List of columns that will act as a dentifier
---input
var_name
string
Name to use for the column of the variable.
---input
value_name
string
Name for the column with the value. (For more information see pandas melt function.)
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Melt service result.
--act
group
Function for grouping a set of records based on certain conditions.
http://localhost:11003/transform/group
POST
---input
group
array
List of column names to be grouped with.
---input
variable
string
List of variables to which the grouping function will be applied (separated by commas).
---input
group_by
string
grouping function (mean, median, mode, sum, etc)
---input
data
json
Json in record format with the data to be processed.
---output
result
json
Group service result.
-cont
tps_graphics
Service to graphic data base on a dataset.
--act
scatter
Scatter graph.
http://localhost:11005/scatter
POST
---input
data
json
Json list with dataset (format: records).
---input
variables
array
List of variables to graph (maximum 3)
---input
labels
array
OPTIONAL. List of labels to assign color to the points.
---input
point_label
array
OPTIONAL. List of labels to assign a text to the points.
---output
result
json
Scatter service result. Name of the generated file. To access the image you have to call the get_images service.
--act
line
Linear graph.
http://localhost:11005/line
POST
---input
data
json
Json list with dataset (format: records).
---input
variables
array
List of variables to graph (maximum 3)
---input
labels
array
OPTIONAL. List of labels to assign color to the lines.
---output
result
json
Line service result. Name of the generated file. To access the image you have to call the get_images service.
--act
bar
Bar graph.
http://localhost:11005/bar
POST
---input
data
json
Json list with dataset (format: records).
---input
variables
array
List of variables to graph (maximum 3)
---input
labels
array
OPTIONAL. List of labels to assign color to the bars.
---output
result
json
Bar service result. Name of the generated file. To access the image you have to call the get_images service.
--act
hist
Histogram graph.
http://localhost:11005/bar
POST
---input
data
json
Json list with dataset (format: records).
---input
variables
array
List of variables to graph (maximum 3)
---input
alpha
float
OPTIONAL. Bar size in percent 0 to 1. (eg. 0.25)
---input
bins
integer
OPTIONAL. number of bars, not greater than the number of records.
---output
result
json
Bar service result. Name of the generated file. To access the image you have to call the get_images service.
--act
get_images
Images download.
http://localhost:11005/<file>
GET
---input
file
string
Identifier or name of the image to download.
---output
result
image
Get_images service result.